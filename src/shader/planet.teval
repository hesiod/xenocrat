#version 450 core

#insert noise3D

layout(triangles, equal_spacing, cw) in;
in vec3 tctrl_position[];
out vec3 teval_position;
out vec3 teval_normal;
out float displacement;
uniform mat4 transform;
uniform vec3 origin;

uniform float noisiness;

vec3 to_polar(const vec3 c)
{
  float r = length(c);
  float theta = acos(c.z / r);
  float phi = atan(c.y, c.x + 1e-19);
  return vec3(r, theta, phi);
}

vec3 to_cartesian(const vec3 p)
{
  return vec3(p.x * sin(p.y) * cos(p.z),
	      p.x * sin(p.y) * sin(p.z),
	      p.x * cos(p.y));
}

float fBm(const vec3 v, out vec3 normal, const float radius, const int octaves, float frequency, const float gain, const float lacunarity)
{
  float rv = 0.0;
  normal = vec3(0,0,0);
  float amplitude = gain;

  for (int i = 0; i < octaves; ++i)
  {
      vec3 grad;
      rv += snoise(v * frequency, grad) * amplitude;
      normal += grad * amplitude;
      frequency *= lacunarity;
      amplitude *= gain;
  }
  return rv;
}

void main()
{
  vec3 p = normalize(gl_TessCoord.x * tctrl_position[0] +
		     gl_TessCoord.y * tctrl_position[1] +
		     gl_TessCoord.z * tctrl_position[2]);
  vec3 po = to_polar(p) - origin;
  displacement = fBm(p, teval_normal, po.x, 32, 0.35, 0.6, 1.8715) * noisiness;
  po.x += displacement;
  //displacement = snoise(p, teval_normal) * noisiness;
  teval_normal /= po.x;
  teval_normal = normalize(mat3(transform) * (p - noisiness * (teval_normal - dot(teval_normal, p) * p)));
  vec3 noisy = to_cartesian(po) + origin;
  gl_Position = transform * vec4(noisy, 1);
  teval_position = vec3(gl_Position);
}
