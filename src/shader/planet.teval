#version 440 core

#insert noise3D

layout(triangles, equal_spacing, cw) in;
in vec3 tctrl_position[];
uniform mat4 proj;
uniform mat4 model;
uniform mat4 view;
uniform float zoom;
uniform float noisiness;
uniform vec3 origin;

vec3 to_polar(const vec3 c)
{
  float r = length(c);
  float theta = acos(c.z / r);
  float phi = atan(c.y, c.x + 1e-19);
  return vec3(r, theta, phi);
}

vec3 to_cartesian(const vec3 p)
{
  return vec3(p.x * sin(p.y) * cos(p.z),
	      p.x * sin(p.y) * sin(p.z),
	      p.x * cos(p.y));
}

float fBm(const vec3 v, const int octaves, float frequency, const float gain, const float lacunarity)
{
  //for each pixel, get the value
  float rv = 0.0;
  float amplitude = gain;

  for (int i = 0; i < octaves; ++i)
    {
      rv += snoise(v * frequency) * amplitude;
      frequency *= lacunarity;
      amplitude *= gain;
    }
  return rv;
}

void main()
{
  vec3 p = normalize(gl_TessCoord.x * tctrl_position[0] +
		     gl_TessCoord.y * tctrl_position[1] +
		     gl_TessCoord.z * tctrl_position[2]);
  vec3 po = to_polar(p) - origin;
  po.x += fBm(po, 3, 1.5, 0.65, 1.8715) * noisiness;
  vec3 noisy = to_cartesian(po) + origin;
  gl_Position = proj * view * model * vec4(noisy / zoom, 1);
}
